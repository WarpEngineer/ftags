#!/usr/bin/env bash
# This file:
#
#  - Demos BASH3 Boilerplate (change this for your script)
#
# Usage:
#
#  Set tags on files:
#  LOG_LEVEL=7 ./ftags -t tag1,tag2 file1 file2 ....
#
#  List tags on files or directories
#  LOG_LEVEL=7 ./ftags -l [ file1 file2 directory1 ... ]
#
#  Search for tag
#  LOG_LEVEL=7 ./ftags tag 
#
#  Remove tag
#  LOG_LEVEL=7 ./ftags -r tag1,tag2 file1 file1 ...
#
#  Future feature:
#  Search for tag - CWD only
#  LOG_LEVEL=7 ./ftags-local tag
#
#  Future feature:
#  Search for tag - use find instead of mlocate
#  LOG_LEVEL=7 ./ftags-find tag
#
# The MIT License (MIT)
# Copyright (c) 2017 A. G. Madi ( @WarpEngineer )
# You are not obligated to bundle the LICENSE file with your projects as long
# as you leave these references intact in the header comments of your source files.
# http://bash3boilerplate.sh/#authors
# https://github.com/WarpEngineer/bash3boilerplate

# Exit on error. Append "|| true" if you expect an error.
set -o errexit
# Exit on error inside any functions or subshells.
set -o errtrace
# Do not allow use of undefined vars. Use ${VAR:-} to use an undefined VAR
set -o nounset
# Catch the error in case mysqldump fails (but gzip succeeds) in `mysqldump |gzip`
set -o pipefail
# Turn on traces, useful while debugging but commented out by default
# set -o xtrace

# Boilerplate version
__BOILERPLATE_VERSION__="2016.10.6"

# Set script version 
__version="2017.12.0.1"

# BASH version 4+ is required
[[ "${BASH_VERSION:0:1}" -ge "4" ]] || (echo "ERROR: BASH version 4 or above is required"; exit 1)

if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
  __i_am_main_script="0" # false

  if [[ "${__usage+x}" ]]; then
    if [[ "${BASH_SOURCE[1]}" = "${0}" ]]; then
      __i_am_main_script="1" # true
    fi

    __b3bp_external_usage="true"
    __b3bp_tmp_source_idx=1
  fi
else
  __i_am_main_script="1" # true
  [[ "${__usage+x}" ]] && unset -v __usage
  [[ "${__helptext+x}" ]] && unset -v __helptext
fi

# Set magic variables for current file, directory, os, etc.
__dir="$(cd "$(dirname "${BASH_SOURCE[${__b3bp_tmp_source_idx:-0}]}")" && pwd)"
__file="${__dir}/$(basename "${BASH_SOURCE[${__b3bp_tmp_source_idx:-0}]}")"
__base="$(basename "${__file}" .sh)"


# Define the environment variables (and their defaults) that this script depends on
LOG_LEVEL="${LOG_LEVEL:-5}" # 7 = debug -> 0 = emergency
NO_COLOR="${NO_COLOR:-}"    # true = disable color. otherwise autodetected

COLOR_CYAN="\x1b[36m"
COLOR_OUTPUT=${COLOR_CYAN}
COLOR_PURPLE="\x1b[35m"
COLOR_DEBUG=${COLOR_PURPLE}
COLOR_GREEN="\x1b[32m"
COLOR_INFO=${COLOR_GREEN}
COLOR_BLUE="\x1b[34m"
COLOR_NOTICE=${COLOR_BLUE}
COLOR_YELLOW="\x1b[33m"
COLOR_WARNING=${COLOR_YELLOW}
COLOR_DARKRED="\x1b[31m"
COLOR_ERROR=${COLOR_DARKRED}
COLOR_RED="\x1b[1;31m"
COLOR_CRITICAL=${COLOR_RED}
COLOR_ALERT="\x1b[1;33;41m"
COLOR_EMERGENCY="\x1b[1;4;5;33;41m"
COLOR_RESET="\x1b[0m"

### Functions
##############################################################################
function __b3bp_color_out () {
  local out_color="${1}"
  shift
  local no_color_substitute="${1}"
  shift

  local colorvar="COLOR_${out_color^^}"
  local color="${!colorvar:-${COLOR_ERROR}}"
  local color_reset=${COLOR_RESET}

  if [[ "${NO_COLOR:-}" = "true" ]] || [[ ! -t 1 ]]; then
    # Don't use colors on pipes
    color=${no_color_substitute}; color_reset=""
  fi
  while IFS=$'\n' read -r out_line; do
    echo -e "${color}${out_line}${color_reset}"
  done <<< "${@:-}"
}

function cyan_out    () { __b3bp_color_out cyan    ""  "${@}";     }
function purple_out  () { __b3bp_color_out purple  ""  "${@}";     }
function green_out   () { __b3bp_color_out green   "+" "${@}";     }
function blue_out    () { __b3bp_color_out blue    ""  "${@}";     }
function yellow_out  () { __b3bp_color_out yellow  ""  "${@}";     }
function darkred_out () { __b3bp_color_out darkred ""  "${@}";     }
function red_out     () { __b3bp_color_out red     "-" "${@}";     }

function __b3bp_log () {
  local log_level="${1}"
  shift

  local colorvar="COLOR_${log_level^^}"
  local color="${!colorvar:-${COLOR_ERROR}}"
  local color_reset=${COLOR_RESET}

  if [[ "${NO_COLOR:-}" = "true" ]]; then
    color=""; color_reset=""
  elif ([[ "${log_level}" = "output" ]] && [[ ! -t 1 ]]); then
    # Don't use colors on pipes
    color=""; color_reset=""
  elif ([[ ! "${log_level}" = "output" ]] && [[ ! -t 2 ]]); then
    # Don't use colors on pipes
    color=""; color_reset=""
  fi

  # all remaining arguments are to be printed
  local log_line=""

  while IFS=$'\n' read -r log_line; do
    if [ "${log_level}" = "output" ]; then
      echo -e "$(date -u +"%Y-%m-%d %H:%M:%S UTC") ${color}$(printf "[%9s]" ${log_level})${color_reset} $log_line"
    else
      echo -e "$(date -u +"%Y-%m-%d %H:%M:%S UTC") ${color}$(printf "[%9s]" ${log_level})${color_reset} $log_line" 1>&2
    fi
  done <<< "${@:-}"
}

function emergency () {                                __b3bp_log emergency "${@}"; exit 1; }
function alert ()     { [[ "${LOG_LEVEL:-0}" -ge 1 ]] && __b3bp_log alert "${@}"; true; }
function critical ()  { [[ "${LOG_LEVEL:-0}" -ge 2 ]] && __b3bp_log critical "${@}"; true; }
function error ()     { [[ "${LOG_LEVEL:-0}" -ge 3 ]] && __b3bp_log error "${@}"; true; }
function warning ()   { [[ "${LOG_LEVEL:-0}" -ge 4 ]] && __b3bp_log warning "${@}"; true; }
function notice ()    { [[ "${LOG_LEVEL:-0}" -ge 5 ]] && __b3bp_log notice "${@}"; true; }
function info ()      { [[ "${LOG_LEVEL:-0}" -ge 6 ]] && __b3bp_log info "${@}"; true; }
function debug ()     { [[ "${LOG_LEVEL:-0}" -ge 7 ]] && __b3bp_log debug "${@}"; true; }
function output ()    { __b3bp_log output "${@}"; true; }

function box() { 
	t="$1xxxx"
	c=${2:-=}
	output ${t//?/$c}
	output "$c $1 $c"
	output ${t//?/$c}
} # Make box around text. By @bartonski

function help () {
  echo "" 1>&2
  echo " ${*}" 1>&2
  echo "" 1>&2
  echo "  ${__usage:-No usage available}" 1>&2
  echo "" 1>&2

  if [[ "${__helptext:-}" ]]; then
    echo " ${__helptext}" 1>&2
    echo "" 1>&2
  fi

  exit 1
}


### Parse commandline options
##############################################################################

# Commandline options. This defines the usage page, and is used to parse cli
# opts & defaults from. The parsing is unforgiving so be precise in your syntax
# - A short option must be preset for every long option; but every short option
#   need not have a long option
# - `--` is respected as the separator between options and arguments
# - We do not bash-expand defaults, so setting '~/app' as a default will not resolve to ${HOME}.
#   you can use bash variables to work around this (so use ${HOME} instead)

# shellcheck disable=SC2015
[[ "${__usage+x}" ]] || read -r -d '' __usage <<-'EOF' || true # exits non-zero when EOF encountered
  -l --list         List set tags on files or directories
  -t --tags   [arg] Comma separated list of tags to set
  -r --remove [arg] Comma separated list of tags to remove
  -u --update       Update mlocate database after setting/removing tags
  -p --prune        Prune broken tags in a directory
  -v                Enable verbose mode, print script as it is executed
  -d --debug        Enables debug mode
  -h --help         This page
  -n --no-color     Disable color output
  -V --version      Show version and exit
EOF

# shellcheck disable=SC2015
[[ "${__helptext+x}" ]] || read -r -d '' __helptext <<-'EOF' || true # exits non-zero when EOF encountered
 ftags sets tags on files and searches for them.  #TODO: add more stuff here.
 Note: moving a file will break its tags. moving a directory will break tags until next time updatedb is run.
 usage1: ...
 usage2: ...
 ...
 #TODO: man page (look at experiment notes) and installer (install?)
 #TODO: use 'parallel' if available ( for 'find' option perhaps )
 #TODO: updatedb after set/remove should look for update script. it's different on mac os.
 #	/usr/libexec/locate.updatedb
 #TODO: maybe run the updatedb in the background (use pidof to make sure not to run more than one)
 #TODO: realpath is not available everywhere (Mac) so it should be a local function
 #      see README.md
 #TODO: test on a bunch of systems, including Mac OS
 #NOTE: instead of relying on mlocate, can we keep the tags in a hierarchy under ~/.ftags?
 #	it'll be easier to prune that way too, and we can use find command, and no need for sudo
 #	use experiments directory to try this out
EOF

# Translate usage string -> getopts arguments, and set $arg_<flag> defaults
while read -r __b3bp_tmp_line; do
  if [[ "${__b3bp_tmp_line}" =~ ^- ]]; then
    # fetch single character version of option string
    __b3bp_tmp_opt="${__b3bp_tmp_line%% *}"
    __b3bp_tmp_opt="${__b3bp_tmp_opt:1}"

    # fetch long version if present
    __b3bp_tmp_long_opt=""

    if [[ "${__b3bp_tmp_line}" = *"--"* ]]; then
      __b3bp_tmp_long_opt="${__b3bp_tmp_line#*--}"
      __b3bp_tmp_long_opt="${__b3bp_tmp_long_opt%% *}"
    fi

    # map opt long name to+from opt short name
    printf -v "__b3bp_tmp_opt_long2short_${__b3bp_tmp_long_opt//-/_}" '%s' "${__b3bp_tmp_opt}"
    printf -v "__b3bp_tmp_opt_short2long_${__b3bp_tmp_opt}" '%s' "${__b3bp_tmp_long_opt//-/_}"

    # check if option takes an argument
    if [[ "${__b3bp_tmp_line}" =~ \[.*\] ]]; then
      __b3bp_tmp_opt="${__b3bp_tmp_opt}:" # add : if opt has arg
      __b3bp_tmp_init=""  # it has an arg. init with ""
      printf -v "__b3bp_tmp_has_arg_${__b3bp_tmp_opt:0:1}" '%s' "1"
    elif [[ "${__b3bp_tmp_line}" =~ \{.*\} ]]; then
      __b3bp_tmp_opt="${__b3bp_tmp_opt}:" # add : if opt has arg
      __b3bp_tmp_init=""  # it has an arg. init with ""
      # remember that this option requires an argument
      printf -v "__b3bp_tmp_has_arg_${__b3bp_tmp_opt:0:1}" '%s' "2"
    else
      __b3bp_tmp_init="0" # it's a flag. init with 0
      printf -v "__b3bp_tmp_has_arg_${__b3bp_tmp_opt:0:1}" '%s' "0"
    fi
    __b3bp_tmp_opts="${__b3bp_tmp_opts:-}${__b3bp_tmp_opt}"
  fi

  [[ "${__b3bp_tmp_opt:-}" ]] || continue

  if [[ "${__b3bp_tmp_line}" =~ (^|\.\ *)Default= ]]; then
    # ignore default value if option does not have an argument
    __b3bp_tmp_varname="__b3bp_tmp_has_arg_${__b3bp_tmp_opt:0:1}"

    if [[ "${!__b3bp_tmp_varname}" != "0" ]]; then
      __b3bp_tmp_init="${__b3bp_tmp_line##*Default=}"
      __b3bp_tmp_re='^"(.*)"$'
      if [[ "${__b3bp_tmp_init}" =~ ${__b3bp_tmp_re} ]]; then
        __b3bp_tmp_init="${BASH_REMATCH[1]}"
      else
        __b3bp_tmp_re="^'(.*)'$"
        if [[ "${__b3bp_tmp_init}" =~ ${__b3bp_tmp_re} ]]; then
          __b3bp_tmp_init="${BASH_REMATCH[1]}"
        fi
      fi
    fi
  fi

  if [[ "${__b3bp_tmp_line}" =~ (^|\.\ *)Required\. ]]; then
    # remember that this option requires an argument
    printf -v "__b3bp_tmp_has_arg_${__b3bp_tmp_opt:0:1}" '%s' "2"
  fi

  printf -v "arg_${__b3bp_tmp_opt:0:1}" '%s' "${__b3bp_tmp_init}"
done <<< "${__usage:-}"

# run getopts only if options were specified in __usage
if [[ "${__b3bp_tmp_opts:-}" ]]; then
  # Allow long options like --this
  __b3bp_tmp_opts="${__b3bp_tmp_opts}-:"

  # Reset in case getopts has been used previously in the shell.
  OPTIND=1

  # start parsing command line
  set +o nounset # unexpected arguments will cause unbound variables
                 # to be dereferenced
  # Overwrite $arg_<flag> defaults with the actual CLI options
  while getopts "${__b3bp_tmp_opts}" __b3bp_tmp_opt; do
    [[ "${__b3bp_tmp_opt}" = "?" ]] && help "Invalid use of script: ${*} "

    if [[ "${__b3bp_tmp_opt}" = "-" ]]; then
      # OPTARG is long-option-name or long-option=value
      if [[ "${OPTARG}" =~ .*=.* ]]; then
        # --key=value format
        __b3bp_tmp_long_opt=${OPTARG/=*/}
        # Set opt to the short option corresponding to the long option
        __b3bp_tmp_varname="__b3bp_tmp_opt_long2short_${__b3bp_tmp_long_opt//-/_}"
        printf -v "__b3bp_tmp_opt" '%s' "${!__b3bp_tmp_varname}"
        OPTARG=${OPTARG#*=}
      else
        # --key value format
        # Map long name to short version of option
        __b3bp_tmp_varname="__b3bp_tmp_opt_long2short_${OPTARG//-/_}"
        printf -v "__b3bp_tmp_opt" '%s' "${!__b3bp_tmp_varname}"
        # Only assign OPTARG if option takes an argument
        __b3bp_tmp_varname="__b3bp_tmp_has_arg_${__b3bp_tmp_opt}"
        printf -v "OPTARG" '%s' "${@:OPTIND:${!__b3bp_tmp_varname}}"
        # shift over the argument if argument is expected
        ((OPTIND+=__b3bp_tmp_has_arg_${__b3bp_tmp_opt}))
      fi
      # we have set opt/OPTARG to the short value and the argument as OPTARG if it exists
    fi
    __b3bp_tmp_varname="arg_${__b3bp_tmp_opt:0:1}"
    __b3bp_tmp_default="${!__b3bp_tmp_varname}"

    __b3bp_tmp_value="${OPTARG}"
    if [[ -z "${OPTARG}" ]]; then
      __b3bp_tmp_value=$((${__b3bp_tmp_default} + 1))
    fi

    printf -v "${__b3bp_tmp_varname}" '%s' "${__b3bp_tmp_value}"
    debug "cli arg ${__b3bp_tmp_varname} = (${__b3bp_tmp_default}) -> ${!__b3bp_tmp_varname}"
  done
  set -o nounset # no more unbound variable references expected

  shift $((OPTIND-1))

  if [[ "${1:-}" = "--" ]] ; then
    shift
  fi
fi


### Automatic validation of required option arguments
##############################################################################

for __b3bp_tmp_varname in ${!__b3bp_tmp_has_arg_*}; do
  # validate only options which required an argument
  [[ "${!__b3bp_tmp_varname}" = "2" ]] || continue

  __b3bp_tmp_opt_short="${__b3bp_tmp_varname##*_}"
  __b3bp_tmp_varname="arg_${__b3bp_tmp_opt_short}"
  [[ "${!__b3bp_tmp_varname}" ]] && continue

  __b3bp_tmp_varname="__b3bp_tmp_opt_short2long_${__b3bp_tmp_opt_short}"
  printf -v "__b3bp_tmp_opt_long" '%s' "${!__b3bp_tmp_varname}"
  [[ "${__b3bp_tmp_opt_long:-}" ]] && __b3bp_tmp_opt_long=" (--${__b3bp_tmp_opt_long//_/-})"

  help "Option -${__b3bp_tmp_opt_short}${__b3bp_tmp_opt_long:-} requires an argument"
done


### Cleanup Environment variables
##############################################################################

for __tmp_varname in ${!__b3bp_tmp_*}; do
  unset -v "${__tmp_varname}"
done

unset -v __tmp_varname


### Externally supplied __usage. Nothing else to do here
##############################################################################

if [[ "${__b3bp_external_usage:-}" = "true" ]]; then
  unset -v __b3bp_external_usage
  return
fi


### Signal trapping and backtracing
##############################################################################

function __b3bp_cleanup_before_exit () {
  info "Cleaning up. Done"
}
trap __b3bp_cleanup_before_exit EXIT

# requires `set -o errtrace`
__b3bp_err_report() {
    local error_code
    error_code=${?}
    error "Error in ${__file} in function ${1} on line ${2}"
    exit ${error_code}
}
# Uncomment the following line for always providing an error backtrace
# trap '__b3bp_err_report "${FUNCNAME:-.}" ${LINENO}' ERR


### Command-line argument switches (like -d for debugmode, -h for showing helppage)
##############################################################################

# debug mode
if [[ "${arg_d:?}" = "1" ]]; then
  set -o xtrace
  LOG_LEVEL="7"
  # Enable error backtracing
  trap '__b3bp_err_report "${FUNCNAME:-.}" ${LINENO}' ERR
fi

# verbose mode
if [[ "${arg_v:?}" = "1" ]]; then
  set -o verbose
fi

# set color mode
if [[ "${arg_n:?}" = "1" ]]; then
  NO_COLOR="true"
else
  # autodetect but default to false if not set
  if ( [[ "${TERM:-}" != "xterm"* ]] && [[ "${TERM:-}" != "screen"* ]] ); then
    # Don't use colors on non-recognized terminals
    NO_COLOR="true"
  fi
  NO_COLOR="${NO_COLOR:-false}"    # default to false if not set
fi

# version mode
if [ "${arg_V:?}" = "1" ]; then
 # Version print exists with code 1
 echo "Version: ${__version}" 2>&1
 exit 1
fi

# help mode
if [[ "${arg_h:?}" = "1" ]]; then
  # Help exists with code 1
  help "Help using ${0}"
fi

### Validation. Error out if the things required for your script are not present
##############################################################################
[[ "${LOG_LEVEL:-}" ]]              || emergency "Cannot continue without LOG_LEVEL. "

# set run mode
if [[ "${arg_t:-}" ]]; then
	[[ "${#}" != "0" ]]         || help      "At least one filename is required to set a tag"
	RUN_MODE="SET"
elif [[ "${arg_r:-}" ]]; then
	[[ "${#}" != "0" ]]         || help      "At least one filename is required to remove a tag"
	RUN_MODE="REMOVE"
elif [[ "${arg_l:-}" == 1 ]]; then
	[[ "${#}" != "0" ]]         || help      "At least one filename or directory required to list tags"
	RUN_MODE="LIST"
elif [[ "${arg_p:-}" == 1 ]]; then
	[[ "${#}" != "0" ]]         || help      "At least one directory required to prune tags"
	RUN_MODE="PRUNE"
else
	# default mode is to search on tags
	RUN_MODE="SEARCH"
	[[ "${#}" != "0" ]]         || help      "At least one tag is required to perform a search"
fi

### Runtime
##############################################################################

info "__i_am_main_script: ${__i_am_main_script}"
info "__file: ${__file}"
info "__dir: ${__dir}"
info "__base: ${__base}"
info "OSTYPE: ${OSTYPE}"

info "arg_t: ${arg_t}"
info "arg_r: ${arg_r}"
info "arg_u: ${arg_u}"
info "arg_p: ${arg_p}"
info "arg_l: ${arg_l}"
info "arg_d: ${arg_d}"
info "arg_v: ${arg_v}"
info "arg_h: ${arg_h}"
info "RUN_MODE:    ${RUN_MODE}"

case ${RUN_MODE} in
	"SET")
		IFS="," read -a tag_array <<< ${arg_t}
		for file in "${@}"; do
			# get realpath of file and verify it exists
			realfile=$(realpath "${file}")
			[[ -r "${realfile}" ]] || emergency "File is not accessible: ${realfile}"
			DIR=$(dirname "${realfile}")
			BASE=$(basename "${realfile}")
			# ensure .ftags directory exists
			mkdir -p "$DIR"/.ftags
			for tag in "${tag_array[@]}"; do
				[[ "${tag}" == *_* ]] && emergency "Tag can not contain underscores"
				[[ "${tag}" == *\ * ]] && emergency "Tag can not contain spaces"
				debug "setting ${DIR}/.ftags/FTAGS_${tag^^}_${BASE}"
				touch "${DIR}/.ftags/FTAGS_${tag^^}_${BASE}"
			done
		done
		[[ ${arg_u} = 1 ]] && ( info "Updating db"; sudo updatedb )
		;;
	"REMOVE")
		IFS="," read -a tag_array <<< ${arg_r}
		for file in "${@}"; do
			# get realpath of file
			realfile=$(realpath "${file}")
			DIR=$(dirname "${realfile}")
			BASE=$(basename "${realfile}")
			for tag in "${tag_array[@]}"; do
				[[ "${tag}" == *_* ]] && warning "Tag can not contain underscores"
				[[ "${tag}" == *\ * ]] && warning "Tag can not contain spaces"
				debug "removing ${DIR}/.ftags/FTAGS_${tag^^}_${BASE}"
				rm -f "${DIR}/.ftags/FTAGS_${tag^^}_${BASE}"
			done
		done
		[[ ${arg_u} = 1 ]] && ( info "Updating db"; sudo updatedb )
		;;
	"LIST")
		for file in "${@}"; do
			realfile=$(realpath "${file}")
			debug "realfile: ${realfile}"
			if ([[ -d "${realfile}" ]] && [[ -d "${realfile}"/.ftags ]]); then
				for f in "${realfile}"/.ftags/FTAGS_*; do
					debug "tagfile: ${f}"
					if [[ -f "${f}" ]]; then
				  	  DIR=$(dirname "${f}")
				  	  BASE=$(basename "${f}")
					  IFS='_' read -a taglines <<< "${BASE}"
				  	  ( [[ -e "${DIR%.ftags}${taglines[2]}" ]] \
					    && green_out "tag ${taglines[1]} set on ${DIR%.ftags}${taglines[2]}" ) \
					    || red_out "tag ${taglines[1]} set on ${DIR%.ftags}${taglines[2]}" 
					fi
				done
			elif [[ -f "${realfile}" ]]; then
				DIR=$(dirname "${realfile}")
				BASE=$(basename "${realfile}")
				for f in "${DIR}"/.ftags/FTAGS_*_"${BASE}"; do
				  debug "tagfile: ${f}"
				  BASE=$(basename "${f}")
				  IFS='_' read -a taglines <<< "${BASE}"
				  [[ ! "${taglines[1]}" = "*" ]] && green_out "${taglines[1]}"
				done
			fi
		done
		;;
	"PRUNE")
		for arg in "${@}"; do
			realfile=$(realpath "${arg}")
			debug "realfile: ${realfile}"
			if ([[ -d "${realfile}" ]] && [[ -d "${realfile}"/.ftags ]]); then
				for f in "${realfile}"/.ftags/FTAGS_*; do
					debug "tagfile: ${f}"
					if [[ -f "${f}" ]]; then
				  	  DIR=$(dirname "${f}")
				  	  BASE=$(basename "${f}")
					  IFS='_' read -a taglines <<< "${BASE}"
				  	  if [[ ! -e "${DIR%.ftags}${taglines[2]}" ]]; then
					    green_out "Removing tag ${taglines[1]} set on ${DIR%.ftags}${taglines[2]}" 
					    rm -f "${f}"
					  fi
					fi
				done
			elif [[ -f "${realfile}" ]]; then
				error "Can not prune a file. Please pass in a directory"
			fi
		done
		[[ ${arg_u} = 1 ]] && ( info "Updating db"; sudo updatedb )
		;;
	"SEARCH")
		# this should be a warning in future and fallback to 'find' if not found
		[[ ! $(which locate) ]] && emergency "Command 'locate' not found in path. Install mlocate."
		# set search mode
		case "${__base}" in  # This is here for a future feature
			"ftags-local")
				# search only in CWD
				SEARCH_MODE="local"
				;;
			"ftags-find")
				# search using find command instead of locate command
				SEARCH_MODE="find"
				;;
			*)
				# search using locate command
				SEARCH_MODE="default"
		esac
		# search tags
		# TODO: use search mode ( future feature )
		for tag in "${@}"; do
			debug "search tag: FTAGS_${tag^^}_*"
			while read -r file; do 
				debug "file: ${file}"
				DIR=$(dirname "${file}")
				BASE=$(basename "${file}")
				found="${DIR%.ftags}${BASE#FTAGS_${tag^^}_}"
				( [[ -e "${found}" ]] && green_out "${found}" ) || red_out "${found}"
			done < <(locate FTAGS_${tag^^}_)
		done
		;;
	*)
		error "Unknown run mode: ${RUN_MODE}"
esac

